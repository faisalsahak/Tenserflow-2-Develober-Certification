{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dn-6c02VmqiN"
   },
   "outputs": [],
   "source": [
    "# ATTENTION: Please do not alter any of the provided code in the exercise. Only add your own code where indicated\n",
    "# ATTENTION: Please do not add or remove any cells in the exercise. The grader will check specific cells based on the cell position.\n",
    "# ATTENTION: Please use the provided epoch values when training.\n",
    "\n",
    "# In this exercise you will train a CNN on the FULL Cats-v-dogs dataset\n",
    "# This will require you doing a lot of data preprocessing because\n",
    "# the dataset isn't split into training and validation for you\n",
    "# This code block has all the required inputs\n",
    "import os\n",
    "import zipfile\n",
    "import random\n",
    "import tensorflow as tf\n",
    "import shutil\n",
    "from tensorflow.keras.optimizers import RMSprop\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from shutil import copyfile\n",
    "from os import getcwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "3sd9dQWa23aj"
   },
   "outputs": [],
   "source": [
    "path_cats_and_dogs = f\"{getcwd()}/../tmp2/cats-and-dogs.zip\"\n",
    "shutil.rmtree('/tmp')\n",
    "\n",
    "local_zip = path_cats_and_dogs\n",
    "zip_ref = zipfile.ZipFile(local_zip, 'r')\n",
    "zip_ref.extractall('/tmp')\n",
    "zip_ref.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gi3yD62a6X3S"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1500\n",
      "1500\n"
     ]
    }
   ],
   "source": [
    "print(len(os.listdir('/tmp/PetImages/Cat/')))\n",
    "print(len(os.listdir('/tmp/PetImages/Dog/')))\n",
    "\n",
    "# Expected Output:\n",
    "# 1500\n",
    "# 1500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "F-QkLjxpmyK2"
   },
   "outputs": [],
   "source": [
    "# Use os.mkdir to create your directories\n",
    "# You will need a directory for cats-v-dogs, and subdirectories for training\n",
    "# and testing. These in turn will need subdirectories for 'cats' and 'dogs'\n",
    "try:\n",
    "    #YOUR CODE GOES HERE\n",
    "    os.mkdir('/tmp/cats-v-dogs')\n",
    "    os.mkdir('/tmp/cats-v-dogs/training')\n",
    "    os.mkdir('/tmp/cats-v-dogs/testing')\n",
    "    os.mkdir('/tmp/cats-v-dogs/training/cats')\n",
    "    os.mkdir('/tmp/cats-v-dogs/training/dogs')\n",
    "    os.mkdir('/tmp/cats-v-dogs/testing/cats')\n",
    "    os.mkdir('/tmp/cats-v-dogs/testing/dogs')\n",
    "except OSError:\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zvSODo0f9LaU"
   },
   "outputs": [],
   "source": [
    "# Write a python function called split_data which takes\n",
    "# a SOURCE directory containing the files\n",
    "# a TRAINING directory that a portion of the files will be copied to\n",
    "# a TESTING directory that a portion of the files will be copie to\n",
    "# a SPLIT SIZE to determine the portion\n",
    "# The files should also be randomized, so that the training set is a random\n",
    "# X% of the files, and the test set is the remaining files\n",
    "# SO, for example, if SOURCE is PetImages/Cat, and SPLIT SIZE is .9\n",
    "# Then 90% of the images in PetImages/Cat will be copied to the TRAINING dir\n",
    "# and 10% of the images will be copied to the TESTING dir\n",
    "# Also -- All images should be checked, and if they have a zero file length,\n",
    "# they will not be copied over\n",
    "#\n",
    "# os.listdir(DIRECTORY) gives you a listing of the contents of that directory\n",
    "# os.path.getsize(PATH) gives you the size of the file\n",
    "# copyfile(source, destination) copies a file from source to destination\n",
    "# random.sample(list, len(list)) shuffles a list\n",
    "def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):\n",
    "# YOUR CODE STARTS HERE\n",
    "    files = []\n",
    "    for filename in os.listdir(SOURCE):\n",
    "        file = SOURCE + filename\n",
    "        if os.path.getsize(file) > 0:\n",
    "            files.append(filename)\n",
    "        else:\n",
    "            print(filename + \" is zero length, so ignoring.\")\n",
    "\n",
    "    training_length = int(len(files) * SPLIT_SIZE)\n",
    "    testing_length = int(len(files) - training_length)\n",
    "    shuffled_set = random.sample(files, len(files))\n",
    "    training_set = shuffled_set[0:training_length]\n",
    "    testing_set = shuffled_set[:testing_length]\n",
    "\n",
    "    for filename in training_set:\n",
    "        this_file = SOURCE + filename\n",
    "        destination = TRAINING + filename\n",
    "        copyfile(this_file, destination)\n",
    "\n",
    "    for filename in testing_set:\n",
    "        this_file = SOURCE + filename\n",
    "        destination = TESTING + filename\n",
    "        copyfile(this_file, destination)\n",
    "# YOUR CODE ENDS HERE\n",
    "\n",
    "\n",
    "CAT_SOURCE_DIR = \"/tmp/PetImages/Cat/\"\n",
    "TRAINING_CATS_DIR = \"/tmp/cats-v-dogs/training/cats/\"\n",
    "TESTING_CATS_DIR = \"/tmp/cats-v-dogs/testing/cats/\"\n",
    "DOG_SOURCE_DIR = \"/tmp/PetImages/Dog/\"\n",
    "TRAINING_DOGS_DIR = \"/tmp/cats-v-dogs/training/dogs/\"\n",
    "TESTING_DOGS_DIR = \"/tmp/cats-v-dogs/testing/dogs/\"\n",
    "\n",
    "split_size = .9\n",
    "split_data(CAT_SOURCE_DIR, TRAINING_CATS_DIR, TESTING_CATS_DIR, split_size)\n",
    "split_data(DOG_SOURCE_DIR, TRAINING_DOGS_DIR, TESTING_DOGS_DIR, split_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "luthalB76ufC"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1350\n",
      "1350\n",
      "150\n",
      "150\n"
     ]
    }
   ],
   "source": [
    "print(len(os.listdir('/tmp/cats-v-dogs/training/cats/')))\n",
    "print(len(os.listdir('/tmp/cats-v-dogs/training/dogs/')))\n",
    "print(len(os.listdir('/tmp/cats-v-dogs/testing/cats/')))\n",
    "print(len(os.listdir('/tmp/cats-v-dogs/testing/dogs/')))\n",
    "\n",
    "# Expected output:\n",
    "# 1350\n",
    "# 1350\n",
    "# 150\n",
    "# 150"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-BQrav4anTmj"
   },
   "outputs": [],
   "source": [
    "# DEFINE A KERAS MODEL TO CLASSIFY CATS V DOGS\n",
    "# USE AT LEAST 3 CONVOLUTION LAYERS\n",
    "model = tf.keras.models.Sequential([\n",
    "# YOUR CODE HERE\n",
    "    tf.keras.layers.Conv2D(16,(3,3), activation='relu', input_shape=(150,150,3)),\n",
    "    tf.keras.layers.MaxPooling2D((2,2)),\n",
    "    tf.keras.layers.Conv2D(32,(3,3), activation='relu'),\n",
    "    tf.keras.layers.MaxPooling2D((2,2)),\n",
    "#     tf.keras.layers.Conv2D(32,3, activation='relu'),\n",
    "    tf.keras.layers.Conv2D(64,(3,3), activation='relu'),\n",
    "    tf.keras.layers.MaxPooling2D((2,2)),\n",
    "    tf.keras.layers.Flatten(),\n",
    "    tf.keras.layers.Dense(512, activation='relu'),\n",
    "    tf.keras.layers.Dense(1, activation='sigmoid')\n",
    "    \n",
    "])\n",
    "\n",
    "model.compile(optimizer=RMSprop(lr=0.001), loss='binary_crossentropy', metrics=['acc'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NOTE:\n",
    "\n",
    "In the cell below you **MUST** use a batch size of 10 (`batch_size=10`) for the `train_generator` and the `validation_generator`. Using a batch size greater than 10 will exceed memory limits on the Coursera platform."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mlNjoJ5D61N6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 2700 images belonging to 2 classes.\n",
      "Found 300 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "TRAINING_DIR = '/tmp/cats-v-dogs/training' #YOUR CODE HERE\n",
    "train_datagen = ImageDataGenerator(rescale=1./255) #YOUR CODE HERE\n",
    "\n",
    "# NOTE: YOU MUST USE A BATCH SIZE OF 10 (batch_size=10) FOR THE \n",
    "# TRAIN GENERATOR.\n",
    "train_generator = train_datagen.flow_from_directory(directory=TRAINING_DIR, batch_size=10,target_size=(150,150), class_mode='binary') #YOUR CODE HERE\n",
    "\n",
    "VALIDATION_DIR = '/tmp/cats-v-dogs/testing'#YOUR CODE HERE\n",
    "validation_datagen = ImageDataGenerator(rescale=1./255) #YOUR CODE HERE\n",
    "\n",
    "# NOTE: YOU MUST USE A BACTH SIZE OF 10 (batch_size=10) FOR THE \n",
    "# VALIDATION GENERATOR.\n",
    "validation_generator =validation_datagen.flow_from_directory(directory=VALIDATION_DIR, batch_size=10, target_size=(150,150), class_mode='binary')#YOUR CODE HERE\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Expected Output:\n",
    "# Found 2700 images belonging to 2 classes.\n",
    "# Found 300 images belonging to 2 classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "KyS4n53w7DxC"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "270/270 [==============================] - 31s 115ms/step - loss: 0.5255 - acc: 0.7433 - val_loss: 0.4379 - val_acc: 0.8000\n",
      "Epoch 2/2\n",
      "270/270 [==============================] - 33s 121ms/step - loss: 0.4586 - acc: 0.7852 - val_loss: 0.4840 - val_acc: 0.7467\n"
     ]
    }
   ],
   "source": [
    "history = model.fit_generator(train_generator,\n",
    "                              epochs=2,\n",
    "                              verbose=1,\n",
    "                              validation_data=validation_generator)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MWZrJN4-65RC"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Training and validation loss')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# PLOT LOSS AND ACCURACY\n",
    "%matplotlib inline\n",
    "\n",
    "import matplotlib.image  as mpimg\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#-----------------------------------------------------------\n",
    "# Retrieve a list of list results on training and test data\n",
    "# sets for each training epoch\n",
    "#-----------------------------------------------------------\n",
    "acc=history.history['acc']\n",
    "val_acc=history.history['val_acc']\n",
    "loss=history.history['loss']\n",
    "val_loss=history.history['val_loss']\n",
    "\n",
    "epochs=range(len(acc)) # Get number of epochs\n",
    "\n",
    "#------------------------------------------------\n",
    "# Plot training and validation accuracy per epoch\n",
    "#------------------------------------------------\n",
    "plt.plot(epochs, acc, 'r', \"Training Accuracy\")\n",
    "plt.plot(epochs, val_acc, 'b', \"Validation Accuracy\")\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.figure()\n",
    "\n",
    "#------------------------------------------------\n",
    "# Plot training and validation loss per epoch\n",
    "#------------------------------------------------\n",
    "plt.plot(epochs, loss, 'r', \"Training Loss\")\n",
    "plt.plot(epochs, val_loss, 'b', \"Validation Loss\")\n",
    "\n",
    "\n",
    "plt.title('Training and validation loss')\n",
    "\n",
    "# Desired output. Charts with training and validation metrics. No crash :)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Submission Instructions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now click the 'Submit Assignment' button above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# When you're done or would like to take a break, please run the two cells below to save your work and close the Notebook. This will free up resources for your fellow learners. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "<!-- Save the notebook -->\n",
       "IPython.notebook.save_checkpoint();\n"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%javascript\n",
    "<!-- Save the notebook -->\n",
    "IPython.notebook.save_checkpoint();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "IPython.notebook.session.delete();\n",
       "window.onbeforeunload = null\n",
       "setTimeout(function() { window.close(); }, 1000);\n"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%javascript\n",
    "IPython.notebook.session.delete();\n",
    "window.onbeforeunload = null\n",
    "setTimeout(function() { window.close(); }, 1000);"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Exercise 5 - Question.ipynb",
   "provenance": []
  },
  "coursera": {
   "course_slug": "convolutional-neural-networks-tensorflow",
   "graded_item_id": "laIUG",
   "launcher_item_id": "jjQWM"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
